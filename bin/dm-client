#!/usr/bin/env node
'use strict';

var colors = require('colors'),
    http = require('http')
;

var optimist = require('optimist')
.usage('Usage: dm-client [options] route')
.alias('t', 'type')
.default('t', 'text/plain')
.describe('p', 'Port to use')
.alias('p', 'port')
.default('p', 7611)
.describe('p', 'Port to use')
.alias('a', 'address')
.default('a', '0.0.0.0')
.describe('a', 'Address to use')
.boolean('s')
.alias('s', 'silent')
.describe('s', 'Suppress log messages from output')
.boolean('h')
.alias('h', 'help')
.describe('h', 'Print this list and exit.');


var argv = optimist.argv,
    nill = function () {},
    log = argv.silent ? nill : console.log
;


if (argv.h || argv._.length === 0) {
  console.log(optimist.help());
  process.exit();
}

var qry_options = {
  host: argv.address,
  port: argv.port,
  path: '/' + argv._[0].replace(/^\/+/, ''),
  method: 'PUT',
  headers: {
    'Connection' : 'keep-alive',
    'Content-Type' : argv.type
  }
}
var qry = http.request(qry_options, function (qry_res) {
    if (qry_res.statusCode !== 200) {
      console.error(qry_res.statusCode.toString().red + ' received.'.red);
	  process.exit(qry_res.statusCode);
    }
    else {
      qry_res.on('data', function (chunk) {
          process.stdout.write(chunk)
        }
      );
	  qry_res.on('end', function () {
		  process.exit(qry_res.statusCode);
        }
      );

    }
  }
);

qry.on('error', function (e) {
    console.error('Request failed.'.red);
    console.error(e);
  }
);

qry.setSocketKeepAlive(true);
qry.setNoDelay();
process.stdin.pipe(qry);

